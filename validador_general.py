# ===============================================
# PASO 1: SUBIDA Y VALIDACI√ìN DEL ARCHIVO 1
# ===============================================

import streamlit as st
import pandas as pd
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import PatternFill, Font, Alignment

# ================================================
# CONFIGURACI√ìN INICIAL
# ================================================
st.set_page_config(
    page_title="Validador de Archivos",
    page_icon="üìä",
    layout="wide"
)

# ================================================
# INICIALIZACI√ìN DE ESTADOS
# ================================================
if "paso_actual" not in st.session_state:
    st.session_state.paso_actual = 0
if "nombre_colegio" not in st.session_state:
    st.session_state.nombre_colegio = ""
if "archivo1_df" not in st.session_state:
    st.session_state.archivo1_df = None
if "archivo2_df" not in st.session_state:
    st.session_state.archivo2_df = None
if "archivo2_1p3p_df" not in st.session_state:
    st.session_state.archivo2_1p3p_df = None
if "archivo2_4p5s_df" not in st.session_state:
    st.session_state.archivo2_4p5s_df = None
if "archivo1_bytes" not in st.session_state:
    st.session_state.archivo1_bytes = None
if "archivo2_bytes" not in st.session_state:
    st.session_state.archivo2_bytes = None
if "archivo1_fila_cabecera" not in st.session_state:
    st.session_state.archivo1_fila_cabecera = None
if "archivo2_1p3p_fila_cabecera" not in st.session_state:
    st.session_state.archivo2_1p3p_fila_cabecera = None
if "archivo2_4p5s_fila_cabecera" not in st.session_state:
    st.session_state.archivo2_4p5s_fila_cabecera = None
if "cursos_equivalentes" not in st.session_state:
    st.session_state.cursos_equivalentes = [
        "ADOBE ILLUSTRATOR", "ADOBE INDESIGN", "ADOBE PHOTOSHOP PROFICIENT",
        "COACHING PERSONAL Y VOCACIONAL", "DE LA IDEA AL EMPRENDIMIENTO",
        "DESARROLLO DE APLICACIONES M√ìVILES", "DESARROLLO WEB", "DISE√ëO WEB",
        "EDICI√ìN DE AUDIO", "EDICI√ìN DE VIDEO", "EXCEL EXPERT SPECIALIST",
        "EXCEL INTERMEDIATE SPECIALIST", "EXCEL PROFICIENT SPECIALIST",
        "FINANZAS PERSONALES", "GESTI√ìN DE DATA CON MS EXCEL Y POWER BI",
        "GESTI√ìN EMPRESARIAL", "HABILIDADES BLANDAS", "MARKETING DIGITAL",
        "MARKETING PERSONAL", "PRESENTACIONES DE IMPACTO",
        "PROGRAMACI√ìN VISUAL KODU PLANET I", "PROGRAMACI√ìN VISUAL KODU PLANET II",
        "PROGRAMACI√ìN VISUAL KODU PLANET III", "ROBLOX FOR TEENS", "ROB√ìTICA",
        "SCRATCH", "WORD EXPERT SPECIALIST", "WORD PROFICIENT SPECIALIST",
        "LEARNING FOR BEGINNERS 1", "LEARNING FOR BEGINNERS 2", "CODE FOR KIDS"
    ]

# ================================================
# CONSTANTES
# ================================================
COLUMNAS_ARCHIVO1 = [
    "Nro.", "Paterno", "Materno", "Nombres", "Nacimiento (DD/MM/YYYY)", "Sexo (M/F)",
    "Grado", "Secci√≥n", "Correo institucional", "Neurodiversidad (S√≠/No)", "DNI"
]

COLUMNAS_ARCHIVO2 = [
    "Nro.", "Paterno", "Materno", "Nombres", "Curso", "Grado", "Secci√≥n", "Nota Vigesimal"
]

# Constantes de validaci√≥n
SEXO_VALIDO = ["M", "F"]
SECCIONES_VALIDAS = ["A", "B", "C", "D", "E", "F", "G", "U", "UNICO", "UNICA", "√öNICO", "√öNICA", "√önico", "√önica"]
GRADOS_VALIDOS = ["1P", "2P", "3P", "4P", "5P", "6P", "1S", "2S", "3S", "4S", "5S"]
MAPEO_GRADOS = {
    "1": "1P", "2": "2P", "3": "3P", "4": "4P", "5": "5P", "6": "6P",
    "7": "1S", "8": "2S", "9": "3S", "10": "4S", "11": "5S"
}
MAPEO_SECCIONES = {
    "UNICO": "U",
    "UNICA": "U",
    "√öNICO": "U", 
    "√öNICA": "U", 
    "√önico": "U", 
    "√önica": "U"
}
LISTA_COLEGIOS = [
    "Colegio Ateneo la Molina",
    "Colegio B√°rbara Dachille",
    "Colegio Bautista Filadelfia-Comas",
    "Colegio Cepeban",
    "Colegio Cervantes School",
    "Colegio Divino Maestro de Pro",
    "Colegio Divino Ni√±o Jes√∫s",
    "Colegio Don Bosco - San Luis ",
    "Colegio Dora Mayer",
    "Colegio El Carmelo",
    "Colegio Giordano Bruno",
    "Colegio Gracias Jes√∫s",
    "Colegio Ingeniero Carlos Lisson Beingolea",
    "Colegio Innova America High School",
    "Colegio Joseph Novak",
    "Colegio Loris Malaguzzi",
    "Colegio Los Rosales de Santa Rosa",
    "Colegio Maestro Redentor - Huancayo ",
    "Colegio Mahatma Gandhi",
    "Colegio Makarenko",
    "Colegio Mar√≠a Inmaculada Concepci√≥n",
    "Colegio Mashal School",
    "Colegio Miguel Angel",
    "Colegio My Home And School",
    "Colegio Nuestra Se√±ora Carmen de Palao",
    "Colegio Parroquial San Jos√©",
    "Colegio Redimer Jes√∫s De Villa",
    "Colegio San Francisco -Balconcillo ",
    "Colegio San Jos√© de los Balnearios Del Sur",
    "Colegio San Martincito de Porres",
    "Colegio Santa Ana - Tacna",
    "Colegio Santa Angela Merici",
    "Colegio Santa Mar√≠a de Surco",
    "Colegio Signos de La Fe La Salle - Trujillo ",
    "Colegio Sor Querubina de San Pedro",
    "Colegio Andino Huancayo",
    "Colegio Andre Malraux",
    "Colegio Antares",
    "Colegio Divina Misericordia",
    "Colegio Ingenier√≠a Huancayo",
    "Colegio Jes√∫s el Nazareno",
    "Colegio Jes√∫s Mar√≠a - San Mart√≠n de Porres",
    "Colegio Lima International School Of Tomorrow",
    "Colegio Lincoln del Triunfo",
    "Colegio Luz Casanova",
    "Colegio Magister",
    "Colegio Mar√≠a Montessori de Copacabana",
    "Colegio Mar√≠a Rafols",
    "Colegio Melvin Jones",
    "Colegio Nuestra Se√±ora del Buen Consejo",
    "Colegio Patrocinio San Jos√©",
    "Colegio Peruano Japones La Victoria",
    "Colegio Play School Huaral",
    "Colegio San Antonio de Padua",
    "Colegio San Antonio Mar√≠a Claret",
    "Colegio San Charbel",
    "Colegio San Francisco de Borja",
    "Colegio San Germ√°n",
    "Colegio San Jos√© Hermanos Maristas Callao",
    "Colegio San Mateo Anglicano",
    "Colegio Santa Ana - Lima",
    "Colegio Santa Angela",
    "Colegio Santa Anita",
    "Colegio Santa Rosa de Lima"
]

# ================================================
# FUNCIONES AUXILIARES
# ================================================
def detectar_cabecera_automatica(df: pd.DataFrame, columnas_objetivo: list):
    """Detecta autom√°ticamente la fila de cabecera"""
    max_filas, max_cols = min(15, len(df)), min(15, len(df.columns))
    subset = df.iloc[:max_filas, :max_cols]
    columnas_objetivo_norm = [c.strip().lower() for c in columnas_objetivo]

    for idx in range(max_filas):
        fila = subset.iloc[idx].astype(str).str.strip().str.lower().tolist()
        if all(col in fila for col in columnas_objetivo_norm):
            return idx
    return None

def crear_identificador(df, col_paterno, col_materno, col_nombres):
    """Crea columna identificador"""
    return (
        df[col_nombres].astype(str).str.strip() + " " +
        df[col_paterno].astype(str).str.strip() + " " +
        df[col_materno].astype(str).str.strip()
    )

def normalizar_enie(texto):
    """
    Normaliza texto a may√∫sculas preservando TODOS los acentos (tildes y √ë)
    """
    if pd.isna(texto):
        return ""
    
    # Convertir a may√∫sculas y limpiar espacios
    texto = str(texto).strip().upper()
    
    # Normalizar espacios m√∫ltiples
    texto = ' '.join(texto.split())
    
    return texto

def limpiar_filas_vacias(df, columnas_clave=None):
    """
    Args:
        df: DataFrame a limpiar
        columnas_clave: Lista de nombres de columnas para verificar (default: primeras 4)
    
    Returns:
        DataFrame limpio sin filas completamente vac√≠as (evita s√≥lo los Nro o N¬∞)
    """
    if columnas_clave is None:
        # Usar las columnas 2, 3, 4
        columnas_clave = df.columns[1:4].tolist()
    
    # Contar registros originales
    total_original = len(df)
    
    # Filtrar: mantener solo filas con almenos una columna clave tenga datos
    df_limpio = df.dropna(subset=columnas_clave, how='all').copy()
    
    # Eliminar filas donde todas las columnas clave sean strings vac√≠os
    mask = df_limpio[columnas_clave].apply(
        lambda x: x.astype(str).str.strip().ne('')
    ).any(axis=1)
    df_limpio = df_limpio[mask].reset_index(drop=True)
    
    # Mostrar info si se eliminaron filas
    filas_eliminadas = total_original - len(df_limpio)
    if filas_eliminadas > 0:
        st.info(f"üßπ Se eliminaron {filas_eliminadas} filas vac√≠as (quedaron {len(df_limpio)} registros)")
    
    return df_limpio

def homologar_dataframe(df):
    """
    Homologa un DataFrame completo:
    - Todas las columnas: Convierte a may√∫sculas y quita espacios
    - Columnas PATERNO, MATERNO, NOMBRES: Adem√°s quita acentos y mantiene la √ë
    """
    # Columnas especiales que requieren normalizaci√≥n de acentos
    columnas_nombres = ["PATERNO", "MATERNO", "NOMBRES"]
    filas_vacias = df[df[columnas_nombres].isnull().any(axis=1)]

    if not filas_vacias.empty:
        st.error("‚ùå Se detectaron campos vac√≠os en nombres o apellidos (Archivo 1 - N√≥mina)")
        st.dataframe(filas_vacias, use_container_width=True)
        st.stop()

    # Procesar todas las columnas
    for col in df.columns:
        if col.upper() in columnas_nombres:
            # Para columnas de nombres: usar funci√≥n que preserva √ë
            df[col] = df[col].apply(normalizar_enie)
            # Normalizar espacios m√∫ltiples
            df[col] = df[col].str.replace(r'\s+', ' ', regex=True).str.strip()
        else:
            # Solo may√∫sculas y quitar espacios
            df[col] = (
                df[col].astype(str)
                .str.strip()
                .str.upper()
                .str.replace(r'\s+', ' ', regex=True)
                .str.strip()
            )
    
    return df

def convertir_numericas_a_entero(df, columnas=None):
    """
    Convierte valores num√©ricos flotantes a enteros (1.0 ‚Üí "1")
    Funciona incluso en columnas mixtas (1.0, "2P", 3.0)
    
    Args:
        df: DataFrame a procesar
        columnas: Lista de columnas a convertir
    
    Returns:
        DataFrame con columnas convertidas
    """
    if columnas is None:
        columnas = df.select_dtypes(include=['float64', 'float32']).columns.tolist()
    
    for col in columnas:
        if col not in df.columns:
            continue
        
        # Procesar cada valor individualmente
        def convertir_valor(val):
            """Convierte un valor individual"""
            if pd.isna(val):
                return val
            
            # Convertir a string para inspeccionar
            val_str = str(val).strip()
            
            # Si ya tiene letras, dejarlo como est√°
            if any(c.isalpha() for c in val_str):
                return val_str
            
            # Si es num√©rico puro, intentar convertir
            try:
                val_num = float(val)
                # Si es un entero disfrazado de float (1.0, 2.0)
                if val_num % 1 == 0:
                    return str(int(val_num))
                else:
                    # Si tiene decimales reales (1.5), mantener como string
                    return val_str
            except (ValueError, TypeError):
                return val_str
        
        # Aplicar la conversi√≥n a toda la columna
        df[col] = df[col].apply(convertir_valor)
    
    return df

def validar_y_mapear_grados(df, col_grado="GRADO", tipo_validacion="todos"):
    """
    Valida y mapea los grados. Convierte n√∫meros 1-11 a formato est√°ndar (1P-6P, 1S-5S).
    Retorna DataFrame procesado y lista de errores.
    
    Args:
        df: DataFrame a validar
        col_grado: Nombre de la columna de grado
        tipo_validacion: Tipo de validaci√≥n a aplicar:
            - "todos": Valida todos los grados (1P-6P, 1S-5S) - Para Archivo 1
            - "1p3p": Solo valida 1P, 2P, 3P - Para hoja 1P-3P del Archivo 2
            - "4p5s": Solo valida 4P-6P, 1S-5S - Para hoja 4P-5S del Archivo 2
    """
    errores = []
    df[col_grado] = df[col_grado].astype(str).str.strip().str.upper()
    
    # Definir mapeos seg√∫n el tipo de validaci√≥n
    if tipo_validacion == "1p3p":
        mapeo_grados = {
            "1": "1P", "2": "2P", "3": "3P"
        }
        grados_validos = ["1P", "2P", "3P"]
    elif tipo_validacion == "4p5s":
        mapeo_grados = {
            "4": "4P", "5": "5P", "6": "6P",
            "7": "1S", "8": "2S", "9": "3S", "10": "4S", "11": "5S"
        }
        grados_validos = ["4P", "5P", "6P", "1S", "2S", "3S", "4S", "5S"]
    else:  # "todos"
        mapeo_grados = MAPEO_GRADOS
        grados_validos = GRADOS_VALIDOS
    
    # Mapear n√∫meros a grados
    df[col_grado] = df[col_grado].replace(mapeo_grados)
    
    # Validar grados
    grados_invalidos = df.loc[~df[col_grado].isin(grados_validos)]

    if len(grados_invalidos) > 0:
        for idx, row in grados_invalidos.iterrows():
            errores.append(f"Fila {idx + 2}: Grado inv√°lido '{row[col_grado]}'")
    
    return df, errores

def inferir_sexo_por_nombre(nombre):
    """
    Infiere el sexo bas√°ndose en el nombre.
    Retorna 'M' o 'F' seg√∫n terminaciones comunes en espa√±ol.
    """
    if pd.isna(nombre) or str(nombre).strip() == "":
        return "M"  # Por defecto M si no hay nombre
    
    nombre = str(nombre).strip().upper()
    primer_nombre = nombre.split()[0] if nombre else ""
    
    # Terminaciones t√≠picamente femeninas
    terminaciones_femeninas = ['A', 'IA', 'INA', 'ELA', 'ANA', 'LIA', 'RIA', 'TA', 'DA']
    # Nombres espec√≠ficamente femeninos comunes
    nombres_femeninos = ['MARIA', 'CARMEN', 'ROSA', 'LUZ', 'SOL', 'MERCEDES', 'BEATRIZ', 'INES', 'ISABEL']
    
    if primer_nombre in nombres_femeninos:
        return "F"
    
    for term in terminaciones_femeninas:
        if primer_nombre.endswith(term):
            return "F"
    
    return "M"  # Por defecto masculino

def validar_sexo(df, col_sexo="SEXO (M/F)"):
    """
    Valida que el sexo sea M o F.
    Si est√° vac√≠o, infiere el sexo seg√∫n el nombre del alumno.
    Retorna lista de errores (ahora solo para casos que no se puedan resolver).
    """
    errores = []
    df[col_sexo] = df[col_sexo].astype(str).str.strip().str.upper()
    
    # NUEVA L√ìGICA: Reemplazar valores vac√≠os o inv√°lidos por inferencia basada en nombre
    mask_vacios_invalidos = ~df[col_sexo].isin(SEXO_VALIDO)
    
    if mask_vacios_invalidos.any():
        for idx in df[mask_vacios_invalidos].index:
            nombre = df.loc[idx, "NOMBRES"] if "NOMBRES" in df.columns else ""
            sexo_inferido = inferir_sexo_por_nombre(nombre)
            df.loc[idx, col_sexo] = sexo_inferido
            # Se registra como advertencia informativa (no error cr√≠tico)
            identificador = crear_identificador(df.loc[[idx]], "PATERNO", "MATERNO", "NOMBRES").iloc[0]
            errores.append(f"INFO - Fila {idx + 2}: Sexo vac√≠o/inv√°lido, se asign√≥ '{sexo_inferido}' seg√∫n nombre - {identificador}")
    return errores

def validar_secciones(df, col_seccion="SECCI√ìN"):
    """
    Valida que las secciones sean v√°lidas (A-G, U, UNICO, UNICA y estas dos √∫ltimas reemplazarlas por U).
    Retorna lista de errores.
    """
    errores = []
    df[col_seccion] = df[col_seccion].astype(str).str.strip().str.upper()
    
    # (UNICO/UNICA -> U)
    df[col_seccion] = df[col_seccion].replace(MAPEO_SECCIONES)

    secciones_invalidas = df.loc[~df[col_seccion].isin(SECCIONES_VALIDAS)]

    if len(secciones_invalidas) > 0:
        for idx, row in secciones_invalidas.iterrows():
            errores.append(f"Fila {idx + 2}: Secci√≥n inv√°lida '{row[col_seccion]}' (debe ser A-G o U)")
    
    return errores

def validar_neurodiversidad(df, col_neuro="NEURODIVERSIDAD (S√ç/NO)"):
    """
    Valida que neurodiversidad sea S√≠ o No.
    Retorna lista de errores.
    """
    errores = []
    df[col_neuro] = df[col_neuro].astype(str).str.strip().str.upper()
    
    # Mapear variaciones comunes
    mapeo_neuro = {
        "SI": "S√ç", "S": "S√ç", "YES": "S√ç", "Y": "S√ç",
        "N": "NO", "NOT": "NO"
    }
    df[col_neuro] = df[col_neuro].replace(mapeo_neuro)
    
    neuros_invalidas = df.loc[~df[col_neuro].isin(["S√ç", "NO"])]

    if len(neuros_invalidas) > 0:
        for idx, row in neuros_invalidas.iterrows():
            identificador = crear_identificador(df.loc[[idx]], "PATERNO", "MATERNO", "NOMBRES").iloc[0]
            errores.append(f"Fila {idx + 2}: Neurodiversidad inv√°lida '{row[col_neuro]}' - {identificador}")
    
    return errores

def validar_fecha_nacimiento(df, col_fecha="NACIMIENTO (DD/MM/YYYY)"):
    """
    Valida y formatea fechas al formato DD/MM/YYYY.
    Retorna lista de errores y modifica el DataFrame.
    """
    errores = []
    
    for idx, row in df.iterrows():
        fecha_original = str(row[col_fecha]).strip()
        identificador = crear_identificador(df.loc[[idx]], "PATERNO", "MATERNO", "NOMBRES").iloc[0]
        
        # Intentar parsear la fecha con diferentes formatos comunes
        fecha_parseada = pd.to_datetime(fecha_original, errors="coerce", dayfirst=True)
        
        if pd.isna(fecha_parseada):
            errores.append(f"Fila {idx + 2}: Fecha inv√°lida '{fecha_original}' - {identificador}")
        else:
            # Formatear al formato deseado DD/MM/YYYY
            fecha_formateada = fecha_parseada.strftime("%d/%m/%Y")
            df.at[idx, col_fecha] = fecha_formateada
    
    return errores

def validar_dni(df, col_dni="DNI"):
    """
    Valida que el DNI tenga exactamente 8 d√≠gitos.
    Retorna lista de errores.
    """
    errores = []
    df[col_dni] = df[col_dni].astype(str).str.strip()
    
    for idx, row in df.iterrows():
        dni = row[col_dni]
        identificador = crear_identificador(df.loc[[idx]], "PATERNO", "MATERNO", "NOMBRES").iloc[0]
        
        # Validar que sea n√∫mero de 8 d√≠gitos
        if not (dni.isdigit() and len(dni) == 8):
            errores.append(f"Fila {idx + 2}: DNI inv√°lido '{dni}' (debe ser 8 d√≠gitos) - {identificador}")
    
    return errores

def validar_correo(df, col_correo="CORREO INSTITUCIONAL"):
    """
    Valida formato b√°sico de correo electr√≥nico.
    Retorna lista de errores.
    """
    errores = []
    
    for idx, row in df.iterrows():
        correo = str(row[col_correo]).strip().lower()
        identificador = crear_identificador(df.loc[[idx]], "PATERNO", "MATERNO", "NOMBRES").iloc[0]
        
        # Validaci√≥n b√°sica: contiene @ y .
        if "@" not in correo or "." not in correo.split("@")[-1]:
            errores.append(f"Fila {idx + 2}: Correo inv√°lido '{correo}' - {identificador}")
    
    return errores

def mostrar_stepper(paso_actual):
    """Muestra el indicador de progreso visual"""
    pasos = [
        {"num": 0, "titulo": "Nombre del Colegio", "icono": "üè´"},
        {"num": 1, "titulo": "Archivo 1: N√≥mina", "icono": "üìã"},
        {"num": 2, "titulo": "Archivo 2: Notas", "icono": "üìä"},
        {"num": 3, "titulo": "Descarga Final", "icono": "‚¨áÔ∏è"}
    ]
    
    cols = st.columns(len(pasos))
    for i, paso in enumerate(pasos):
        with cols[i]:
            if paso["num"] < paso_actual:
                st.markdown(f"### ‚úÖ {paso['icono']}")
                st.markdown(f"**{paso['titulo']}**")
                st.markdown("*Completado*")
            elif paso["num"] == paso_actual:
                st.markdown(f"### üîµ {paso['icono']}")
                st.markdown(f"**{paso['titulo']}**")
                st.markdown("*En progreso*")
            else:
                st.markdown(f"### ‚ö™ {paso['icono']}")
                st.markdown(f"<span style='color: gray;'>{paso['titulo']}</span>", unsafe_allow_html=True)
                st.markdown("*Pendiente*")
    
    st.divider()

def crear_archivo_evaluador(df_archivo1, df_archivo2_procesado):
    """
    Crea el archivo evaluador haciendo un full join entre archivo1 y archivo2
    usando IDENTIFICADOR como clave √∫nica. Retorna dos DataFrames separados
    por grado: uno para 1P-3P y otro para 4P-5S.
    
    Args:
        df_archivo1: DataFrame del archivo 1 con todos los alumnos
        df_archivo2_procesado: DataFrame del archivo 2 con notas (puede ser 1P-3P o 4P-5S)
    
    Returns:
        tuple: (df_1p3p, df_4p5s) - DataFrames separados por grado
    """
    # Mapear las columnas de archivo1 a las de archivo2
    df1_base = df_archivo1[[
        "IDENTIFICADOR", 
        "PATERNO", 
        "MATERNO", 
        "NOMBRES", 
        "GRADO", 
        "SECCI√ìN"
    ]].copy()
    
    # Preparar archivo2 para el merge
    df2_merge = df_archivo2_procesado.copy()
    
    # Marcar el origen de cada registro ANTES del merge
    df2_merge['_origen'] = 'archivo2'
    df1_base['_origen'] = 'archivo1'

    # Full outer join usando IDENTIFICADOR
    df_evaluador = pd.merge(
        df2_merge,
        df1_base,
        on="IDENTIFICADOR",
        how="outer",
        suffixes=("", "_archivo1"),
        indicator=True
    )
    
    # Crear columna Observaciones basada en el origen
    def asignar_observacion(row):
        if row['_merge'] == 'both':  # Aparece en ambos archivos
            return ''
        elif row['_merge'] == 'right_only':  # Solo en archivo1
            return 'SN'
        else:  # 'left_only' - Solo en archivo2
            return 'RET'
    
    df_evaluador['OBSERVACIONES'] = df_evaluador.apply(asignar_observacion, axis=1)
    
    # Eliminar columnas auxiliares
    df_evaluador = df_evaluador.drop(columns=['_merge', '_origen'], errors='ignore')
    
    # Completar datos faltantes: si no hay datos de archivo2, usar los de archivo1
    columnas_comunes = ["PATERNO", "MATERNO", "NOMBRES", "GRADO", "SECCI√ìN"]
    
    # Completar primero la columna GRADO antes del filtro
    if "GRADO_archivo1" in df_evaluador.columns:
        df_evaluador["GRADO"] = df_evaluador["GRADO"].fillna(df_evaluador["GRADO_archivo1"])
        mask_vacio = (df_evaluador["GRADO"] == "") | (df_evaluador["GRADO"].isna())
        df_evaluador.loc[mask_vacio, "GRADO"] = df_evaluador.loc[mask_vacio, "GRADO_archivo1"]
    
    # Eliminar la columna temporal de GRADO_archivo1 si existe
    df_evaluador = df_evaluador.drop(columns=["GRADO_archivo1"], errors='ignore')
    
    # Continuar completando el resto de columnas comunes (excepto GRADO que ya se proces√≥)
    columnas_comunes_restantes = ["PATERNO", "MATERNO", "NOMBRES", "SECCI√ìN"]

    for col in columnas_comunes_restantes:
        col_archivo1 = f"{col}_archivo1"
        if col_archivo1 in df_evaluador.columns:
            df_evaluador[col] = df_evaluador[col].fillna(df_evaluador[col_archivo1])
            mask_vacio = (df_evaluador[col] == "") | (df_evaluador[col].isna())
            df_evaluador.loc[mask_vacio, col] = df_evaluador.loc[mask_vacio, col_archivo1]
            df_evaluador = df_evaluador.drop(columns=[col_archivo1])
    
    # Asegurar que CURSO y NOTA VIGESIMAL existan
    if "CURSO" not in df_evaluador.columns:
        df_evaluador["CURSO"] = ""
    if "NOTA VIGESIMAL" not in df_evaluador.columns:
        df_evaluador["NOTA VIGESIMAL"] = ""
    
    # Rellenar NaN restantes con cadenas vac√≠as
    df_evaluador = df_evaluador.fillna("")
    
    # SEPARAR EN DOS DATAFRAMES SEG√öN GRADO
    grados_1p3p = ["1P", "2P", "3P"]
    grados_4p5s = ["4P", "5P", "6P", "1S", "2S", "3S", "4S", "5S"]
    
    df_1p3p = df_evaluador[df_evaluador["GRADO"].isin(grados_1p3p)].copy()
    df_4p5s = df_evaluador[df_evaluador["GRADO"].isin(grados_4p5s)].copy()
    
    # Definir columnas finales para 1P-3P (sin NOTAS VIGESIMALES 75% ni PROMEDIO)
    columnas_1p3p = [
        "NRO.", "PATERNO", "MATERNO", "NOMBRES", "CURSO", 
        "GRADO", "SECCI√ìN", "NOTA VIGESIMAL", "IDENTIFICADOR", "OBSERVACIONES"
    ]
    
    # Definir columnas finales para 4P-5S (con NOTAS VIGESIMALES 75% y PROMEDIO)
    columnas_4p5s = [
        "NRO.", "PATERNO", "MATERNO", "NOMBRES", "CURSO", 
        "GRADO", "SECCI√ìN", "NOTA VIGESIMAL", 
        "NOTAS VIGESIMALES 75%", "PROMEDIO", "IDENTIFICADOR", "OBSERVACIONES"
    ]
    
    # Asegurar columnas para 1P-3P
    for col in columnas_1p3p:
        if col not in df_1p3p.columns:
            df_1p3p[col] = ""
    df_1p3p = df_1p3p[columnas_1p3p]
    
    # Asegurar columnas para 4P-5S
    for col in columnas_4p5s:
        if col not in df_4p5s.columns:
            df_4p5s[col] = ""
    df_4p5s = df_4p5s[columnas_4p5s]
    
    # Regenerar NRO. secuencial para cada DataFrame
    if len(df_1p3p) > 0:
        df_1p3p["NRO."] = range(1, len(df_1p3p) + 1)
    
    if len(df_4p5s) > 0:
        df_4p5s["NRO."] = range(1, len(df_4p5s) + 1)
    
    return df_1p3p, df_4p5s

def guardar_con_formato_original(df_procesado, archivo_original_bytes, nombre_hoja, fila_cabecera, agregar_columnas_nuevas=False, solo_hoja_especificada=False):
    """
    Preserva el formato del archivo original y actualiza solo los datos procesados
    
    Args:
        df_procesado: DataFrame con los datos procesados
        archivo_original_bytes: Bytes del archivo Excel original
        nombre_hoja: Nombre de la hoja a actualizar (None para usar la primera hoja)
        fila_cabecera: √çndice de la fila donde est√° la cabecera (base 0 de pandas)
        agregar_columnas_nuevas: Si True, agrega columnas nuevas del df_procesado a la cabecera
    
    Returns:
        BytesIO con el archivo actualizado preservando formato
    """
    wb = load_workbook(BytesIO(archivo_original_bytes))
    
    # Si no se especifica nombre de hoja, usar la primera
    if nombre_hoja is None or nombre_hoja not in wb.sheetnames:
        ws = wb.active
    else:
        ws = wb[nombre_hoja]

    # Si solo_hoja_especificada=True, eliminar todas las dem√°s hojas
    if solo_hoja_especificada:
      hoja_a_mantener = ws.title
      hojas_a_eliminar = [sheet for sheet in wb.sheetnames if sheet != hoja_a_mantener]
      for hoja in hojas_a_eliminar:
          wb.remove(wb[hoja])
    
    # Convertir fila_cabecera de pandas (base 0) a openpyxl (base 1)
    fila_cabecera_excel = fila_cabecera + 1
    fila_inicio_datos = fila_cabecera_excel + 1
    
    # Si se debe agregar columnas nuevas, actualizar la cabecera
    if agregar_columnas_nuevas:
        
        # Leer cabecera actual del Excel (solo celdas con valores)
        cabecera_actual = []
        ultima_col_con_datos = 0
        for idx, cell in enumerate(ws[fila_cabecera_excel], start=1):
            if cell.value is not None:
                cabecera_actual.append(str(cell.value).upper().strip())
                ultima_col_con_datos = idx
        
        cabecera_df = [str(col).upper().strip() for col in df_procesado.columns]
        
        # Encontrar columnas nuevas que no est√°n en la cabecera actual
        columnas_nuevas = [col for col in cabecera_df if col not in cabecera_actual]
        
        # Agregar las columnas nuevas inmediatamente despu√©s de la √∫ltima columna con datos
        if columnas_nuevas:
            # Obtener el estilo de la √∫ltima celda de la cabecera con datos
            celda_referencia = ws.cell(row=fila_cabecera_excel, column=ultima_col_con_datos)
            
            for idx, nueva_col in enumerate(columnas_nuevas, start=1):
                nueva_celda = ws.cell(row=fila_cabecera_excel, column=ultima_col_con_datos + idx)
                nueva_celda.value = nueva_col
                
                # Copiar el estilo de la celda de referencia
                if celda_referencia.fill:
                    nueva_celda.fill = PatternFill(
                        start_color=celda_referencia.fill.start_color,
                        end_color=celda_referencia.fill.end_color,
                        fill_type=celda_referencia.fill.fill_type
                    )
                if celda_referencia.font:
                    nueva_celda.font = Font(
                        name=celda_referencia.font.name,
                        size=celda_referencia.font.size,
                        bold=celda_referencia.font.bold,
                        italic=celda_referencia.font.italic,
                        color=celda_referencia.font.color
                    )
                if celda_referencia.alignment:
                    nueva_celda.alignment = Alignment(
                        horizontal=celda_referencia.alignment.horizontal,
                        vertical=celda_referencia.alignment.vertical
                    )

    # Eliminar filas de datos antiguos (preservando cabecera y filas previas)
    if ws.max_row >= fila_inicio_datos:
        ws.delete_rows(fila_inicio_datos, ws.max_row - fila_inicio_datos + 1)
    
    # Insertar nuevos datos
    for r_idx, row in enumerate(dataframe_to_rows(df_procesado, index=False, header=False), start=fila_inicio_datos):
        for c_idx, value in enumerate(row, start=1):
            # Manejar valores NaN
            if pd.isna(value):
                value = None
            ws.cell(row=r_idx, column=c_idx, value=value)
    
    # Guardar en BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def guardar_evaluador_con_multiples_hojas(archivo_original_bytes, dict_hojas_procesadas):
    """
    Guarda un archivo Excel con m√∫ltiples hojas preservando el formato original.
    
    Args:
        archivo_original_bytes: Bytes del archivo Excel original
        dict_hojas_procesadas: Diccionario con formato {
            'nombre_hoja': {
                'df': DataFrame procesado,
                'fila_cabecera': int (√≠ndice de cabecera en base 0)
            }
        }
    
    Returns:
        BytesIO con el archivo actualizado preservando formato
    """
    wb = load_workbook(BytesIO(archivo_original_bytes))
    
    for nombre_hoja, datos in dict_hojas_procesadas.items():
        df_procesado = datos['df']
        fila_cabecera = datos['fila_cabecera']
        
        # Si la hoja no existe en el workbook, usar la primera disponible o crearla
        if nombre_hoja not in wb.sheetnames:
            # Si es la primera hoja a procesar y no existe, usar la hoja activa
            if len([k for k in dict_hojas_procesadas.keys()]) == 1:
                ws = wb.active
                ws.title = nombre_hoja
            else:
                # Crear nueva hoja
                ws = wb.create_sheet(title=nombre_hoja)
                fila_cabecera = 0  # Para hojas nuevas, empezar desde fila 0
        else:
            ws = wb[nombre_hoja]
        
        # Convertir fila_cabecera de pandas (base 0) a openpyxl (base 1)
        fila_cabecera_excel = fila_cabecera + 1
        fila_inicio_datos = fila_cabecera_excel + 1
        
        # Actualizar cabecera con las columnas del DataFrame (incluyendo OBSERVACIONES)
        cabecera_actual = []
        ultima_col_con_datos = 0
        for idx, cell in enumerate(ws[fila_cabecera_excel], start=1):
            if cell.value is not None:
                cabecera_actual.append(str(cell.value).upper().strip())
                ultima_col_con_datos = idx
        
        cabecera_df = [str(col).upper().strip() for col in df_procesado.columns]
        
        # Encontrar columnas nuevas que no est√°n en la cabecera actual
        columnas_nuevas = [col for col in cabecera_df if col not in cabecera_actual]
        
        # Agregar las columnas nuevas
        if columnas_nuevas:
            celda_referencia = ws.cell(row=fila_cabecera_excel, column=max(1, ultima_col_con_datos))
            
            for idx, nueva_col in enumerate(columnas_nuevas, start=1):
                nueva_celda = ws.cell(row=fila_cabecera_excel, column=ultima_col_con_datos + idx)
                nueva_celda.value = nueva_col
                
                # Copiar el estilo de la celda de referencia
                if celda_referencia.fill:
                    nueva_celda.fill = PatternFill(
                        start_color=celda_referencia.fill.start_color,
                        end_color=celda_referencia.fill.end_color,
                        fill_type=celda_referencia.fill.fill_type
                    )
                if celda_referencia.font:
                    nueva_celda.font = Font(
                        name=celda_referencia.font.name,
                        size=celda_referencia.font.size,
                        bold=celda_referencia.font.bold,
                        italic=celda_referencia.font.italic,
                        color=celda_referencia.font.color
                    )
                if celda_referencia.alignment:
                    nueva_celda.alignment = Alignment(
                        horizontal=celda_referencia.alignment.horizontal,
                        vertical=celda_referencia.alignment.vertical
                    )
        
        # Eliminar filas de datos antiguos
        if ws.max_row >= fila_inicio_datos:
            ws.delete_rows(fila_inicio_datos, ws.max_row - fila_inicio_datos + 1)
        
        # Insertar nuevos datos
        for r_idx, row in enumerate(dataframe_to_rows(df_procesado, index=False, header=False), start=fila_inicio_datos):
            for c_idx, value in enumerate(row, start=1):
                if pd.isna(value):
                    value = None
                ws.cell(row=r_idx, column=c_idx, value=value)
    
    # Guardar en BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return output

# ================================================
# INTERFAZ PRINCIPAL
# ================================================
st.title("üéØ Validador de Archivos Escolares")
st.markdown("### Sistema de Homologaci√≥n de Datos")

# Mostrar stepper
mostrar_stepper(st.session_state.paso_actual)

# ================================================
# PASO 0: Nombre DEL COLEGIO
# ================================================
if st.session_state.paso_actual == 0:
    st.header("üè´ Paso 1: Informaci√≥n del Colegio")

    st.markdown("""
        <div style='background-color: #78808C; padding: 20px; border-radius: 10px; margin-bottom: 20px;'>
            <h4>Bienvenido al sistema de validaci√≥n</h4>
            <p>Para comenzar, ingresa el Nombre del colegio. Este Nombre se usar√° para identificar los archivos descargables.</p>
        </div>
        """, unsafe_allow_html=True)

    col1, col2 = st.columns([3, 1])
    
    with col1:
        index_seleccionado = None

        if st.session_state.nombre_colegio in LISTA_COLEGIOS:
            index_seleccionado = LISTA_COLEGIOS.index(st.session_state.nombre_colegio)

        NOMBRES = st.selectbox(
            "Selecciona el colegio:",
            options=LISTA_COLEGIOS,
            index=index_seleccionado,
            placeholder="Elige un colegio..."
        )
        
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("‚û°Ô∏è Continuar", type="primary", use_container_width=True, disabled = not NOMBRES):
            if NOMBRES:
                st.session_state.nombre_colegio = NOMBRES.strip()
                st.session_state.paso_actual = 1
                st.rerun()
            else:
                st.error("Por favor, ingresa el Nombre del colegio")

# ================================================
# PASO 1: ARCHIVO 1 (N√ìMINA)
# ================================================
elif st.session_state.paso_actual == 1:
    # Mostrar resumen del paso anterior
    with st.expander("‚úÖ Paso 1 completado: Nombre del Colegio", expanded=False):
        st.info(f"**Colegio:** {st.session_state.nombre_colegio}")
        if st.button("üîÑ Cambiar Nombre", key="cambiar_nombre"):
            st.session_state.paso_actual = 0
            st.rerun()
    
    st.header("üìã Paso 2: Archivo de N√≥mina de Alumnos")
    
    with st.container():
        st.markdown("""
        <div style='background-color: #78808C; padding: 20px; border-radius: 10px; margin-bottom: 20px;'>
            <h4>üìÑ Instrucciones</h4>
            <p>Sube el archivo Excel que contiene la n√≥mina de alumnos.</p>
            <p><strong>Columnas requeridas:</strong></p>
            <code>Nro., Paterno, Materno, Nombres, Nacimiento (DD/MM/YYYY), Sexo (M/F), Grado, Secci√≥n, Correo institucional, Neurodiversidad (S√≠/No), DNI</code>
        </div>
        """, unsafe_allow_html=True)
        
        archivo = st.file_uploader(
            "Selecciona el archivo Excel",
            type=["xls", "xlsx"],
            help="El sistema detectar√° autom√°ticamente la fila de cabecera"
        )
        
        if archivo is not None:
            # GUARDAR BYTES ORIGINALES
            st.session_state.archivo1_bytes = archivo.getvalue()
            with st.spinner("üîç Analizando archivo..."):
                try:
                    df_original = pd.read_excel(archivo, header=None)
                    fila_detectada = detectar_cabecera_automatica(df_original, COLUMNAS_ARCHIVO1)
                    
                    if fila_detectada is not None:
                        # GUARDAR √çNDICE DE CABECERA
                        st.session_state.archivo1_fila_cabecera = fila_detectada
                        st.success(f"‚úÖ Cabecera detectada autom√°ticamente en la fila {fila_detectada + 1}")
                        
                        df = pd.read_excel(archivo, header=fila_detectada)
                        
                        # Procesar columnas
                        columnas_norm = {c.strip().lower(): c for c in df.columns}
                        cols_a_usar = []
                        for col_req in COLUMNAS_ARCHIVO1:
                            col_norm = col_req.strip().lower()
                            if col_norm in columnas_norm:
                                cols_a_usar.append(columnas_norm[col_norm])
                        
                        df = df[cols_a_usar]
                        df.columns = [col.upper() for col in COLUMNAS_ARCHIVO1]

                        # Eliminar filas con campos vac√≠os en PATERNO, MATERNO y NOMBRES
                        df = limpiar_filas_vacias(df, columnas_clave=["PATERNO", "MATERNO", "NOMBRES"])
                        
                        df = convertir_numericas_a_entero(df, columnas=["GRADO"])

                        # Convertir num√©ricas a enteros
                        df = homologar_dataframe(df)

                        # Validar campos vac√≠os en PATERNO, MATERNO o NOMBRES
                        columnas_obligatorias = ["PATERNO", "MATERNO", "NOMBRES"]
                        filas_vacias = df[df[columnas_obligatorias].isnull().any(axis=1)]

                        if not filas_vacias.empty:
                            st.error("‚ùå Se detectaron campos vac√≠os en nombres o apellidos (Archivo 1 - N√≥mina)")
                            st.dataframe(filas_vacias, use_container_width=True)
                            st.stop()
                        
                        # Validaciones para Archivo 1 (n√≥mina)
                        errores_fatales = []
                        alertas = []
                        
                        # Validar y mapear grados
                        df, errores_grados = validar_y_mapear_grados(df, "GRADO")
                        errores_fatales.extend(errores_grados)
                        
                        # Validar sexo
                        errores_sexo = validar_sexo(df, "SEXO (M/F)")
                        alertas.extend(errores_sexo)
                        
                        # Validar secciones
                        errores_secciones = validar_secciones(df, "SECCI√ìN")
                        errores_fatales.extend(errores_secciones)

                        # Validar neurodiversidad
                        errores_neuro = validar_neurodiversidad(df, "NEURODIVERSIDAD (S√ç/NO)")
                        alertas.extend(errores_neuro)
                        
                        # Validar fecha
                        errores_fecha = validar_fecha_nacimiento(df, "NACIMIENTO (DD/MM/YYYY)")
                        alertas.extend(errores_fecha)
                        
                        # Validar DNI
                        errores_dni = validar_dni(df, "DNI")
                        alertas.extend(errores_dni)
                        
                        # Validar correo
                        errores_correo = validar_correo(df, "CORREO INSTITUCIONAL")
                        alertas.extend(errores_correo)
                        
                        # Mostrar errores si existen
                        if errores_fatales:
                            st.error("‚ùå Se encontraron errores de validaci√≥n:")
                            # Convertir lista de alertas a DataFrame
                            df_errores_fatales = pd.DataFrame(errores_fatales, columns=["Detalle de los errores cr√≠ticos"])
                                
                            # Mostrar tabla scrolleable
                            st.dataframe(
                                df_errores_fatales,
                                use_container_width=True,
                                height=220  # ajusta la altura visible (unas 5-6 filas aprox)
                            )
                                
                            st.caption(f"üîé Total de errores: {len(errores_fatales)}")
                            st.info("Por favor, corrige estos errores en el archivo y vuelve a cargarlo")
                            st.stop()
                            
                        else:
                            df["IDENTIFICADOR"] = crear_identificador(df, "PATERNO", "MATERNO", "NOMBRES")
                            st.session_state.archivo1_df = df
                            
                            if alertas:
                                st.warning("‚ö†Ô∏è Se detectaron advertencias en los datos (no bloquean el proceso):")
                                with st.expander("Ver alertas detalladas", expanded=True):
                                    # Convertir lista de alertas a DataFrame
                                    df_alertas = pd.DataFrame(alertas, columns=["Detalle de la Alerta"])
                                    
                                    # Mostrar tabla scrolleable
                                    st.dataframe(
                                        df_alertas,
                                        use_container_width=True,
                                        height=220  # ajusta la altura visible (unas 5-6 filas aprox)
                                    )
                                    
                                    st.caption(f"üîé Total de alertas: {len(alertas)}")
                            else:
                                st.success("‚úÖ Todas las validaciones pasaron correctamente")

                        if not errores_fatales:
                            # Mostrar preview
                            st.markdown("### üìä Vista Previa de Datos")
                            st.info(f"Total de registros: {len(df)}")
                            st.dataframe(df.head(10), use_container_width=True)
                        
                        # Botones de acci√≥n
                        col1, col2 = st.columns(2)
                        with col1:
                            df_descarga = df.drop(columns=["IDENTIFICADOR", "N¬∫"], errors="ignore")
                            buffer = guardar_con_formato_original(
                                df_procesado=df_descarga,
                                archivo_original_bytes=st.session_state.archivo1_bytes,
                                nombre_hoja=None,  # Usar primera hoja
                                fila_cabecera=st.session_state.archivo1_fila_cabecera
                            )
                            st.download_button(
                                label="üíæ Descargar Archivo Homologado",
                                data=buffer,
                                file_name=f"{st.session_state.nombre_colegio}_nomina_RV.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True
                            )
                        with col2:
                            if st.button("‚û°Ô∏è Continuar al Paso 3", type="primary", use_container_width=True):
                                st.session_state.paso_actual = 2
                                st.rerun()
                    
                    else:
                        st.warning("‚ö†Ô∏è No se pudo detectar la cabecera autom√°ticamente")
                        st.markdown("### üîç Detecci√≥n Manual")
                        st.dataframe(df_original.iloc[:15, :15], use_container_width=True)
                        
                        fila_manual = st.number_input(
                            "Indica el n√∫mero de fila que contiene la cabecera:",
                            min_value=1, max_value=15, step=1
                        )
                        
                        if st.button("‚úîÔ∏è Validar Fila Seleccionada", type="primary"):
                            fila_idx = fila_manual - 1
                            fila = df_original.iloc[fila_idx].astype(str).str.strip().str.lower().tolist()
                            columnas_req_norm = [c.lower() for c in COLUMNAS_ARCHIVO1]
                            
                            if all(col in fila for col in columnas_req_norm):
                                st.success("‚úÖ Cabecera v√°lida")
                                df = pd.read_excel(archivo, header=fila_idx)
                                
                                columnas_norm = {c.strip().lower(): c for c in df.columns}
                                cols_a_usar = []
                                for col_req in COLUMNAS_ARCHIVO1:
                                    col_norm = col_req.strip().lower()
                                    if col_norm in columnas_norm:
                                        cols_a_usar.append(columnas_norm[col_norm])
                                
                                df = df[cols_a_usar]
                                df.columns = [col.upper() for col in COLUMNAS_ARCHIVO1]
                                
                                # Homologar datos
                                df = homologar_dataframe(df)
                                
                                # Validar campos vac√≠os en PATERNO, MATERNO o NOMBRES
                                columnas_obligatorias = ["PATERNO", "MATERNO", "NOMBRES"]
                                filas_vacias = df[df[columnas_obligatorias].isnull().any(axis=1)]

                                if not filas_vacias.empty:
                                    st.error("‚ùå Se detectaron campos vac√≠os en nombres o apellidos (Archivo 1 - N√≥mina)")
                                    st.dataframe(filas_vacias, use_container_width=True)
                                    st.stop()
                                
                                # Validaciones para Archivo 1 (n√≥mina)
                                errores_fatales = []
                                alertas = []
                                
                                # Validar y mapear grados
                                df, errores_grados = validar_y_mapear_grados(df, "GRADO")
                                errores_fatales.extend(errores_grados)
                                
                                # Validar sexo
                                errores_sexo = validar_sexo(df, "SEXO (M/F)")
                                alertas.extend(errores_sexo)
                                
                                # Validar secciones
                                errores_secciones = validar_secciones(df, "SECCI√ìN")
                                errores_fatales.extend(errores_secciones)

                                # Validar neurodiversidad
                                errores_neuro = validar_neurodiversidad(df, "NEURODIVERSIDAD (S√ç/NO)")
                                alertas.extend(errores_neuro)
                                
                                # Validar fecha
                                errores_fecha = validar_fecha_nacimiento(df, "NACIMIENTO (DD/MM/YYYY)")
                                alertas.extend(errores_fecha)
                                
                                # Validar DNI
                                errores_dni = validar_dni(df, "DNI")
                                alertas.extend(errores_dni)
                                
                                # Validar correo
                                errores_correo = validar_correo(df, "CORREO INSTITUCIONAL")
                                alertas.extend(errores_correo)
                                
                                # Mostrar errores si existen
                                if errores_fatales:
                                    st.error("‚ùå Se encontraron errores de validaci√≥n:")
                                    # Convertir lista de alertas a DataFrame
                                    df_errores_fatales = pd.DataFrame(errores_fatales, columns=["Detalle de la Alerta"])
                                        
                                    # Mostrar tabla scrolleable
                                    st.dataframe(
                                        df_errores_fatales,
                                        use_container_width=True,
                                        height=220  # ajusta la altura visible (unas 5-6 filas aprox)
                                    )
                                        
                                    st.caption(f"üîé Total de errores: {len(errores_fatales)}")
                                    st.info("Por favor, corrige estos errores en el archivo y vuelve a cargarlo")
                                    st.stop()

                                else:
                                    df["IDENTIFICADOR"] = crear_identificador(df, "PATERNO", "MATERNO", "NOMBRES")
                                    st.session_state.archivo1_df = df
                                    
                                    if alertas:
                                        st.warning("‚ö†Ô∏è Se detectaron advertencias en los datos (no bloquean el proceso):")
                                        with st.expander("Ver alertas detalladas", expanded=True):
                                            # Convertir lista de alertas a DataFrame
                                            df_alertas = pd.DataFrame(alertas, columns=["Detalle de la Alerta"])
                                            
                                            # Mostrar tabla scrolleable
                                            st.dataframe(
                                                df_alertas,
                                                use_container_width=True,
                                                height=220  # ajusta la altura visible (unas 5-6 filas aprox)
                                            )
                                            
                                            st.caption(f"üîé Total de alertas: {len(alertas)}")
                                    else:
                                        st.success("‚úÖ Todas las validaciones pasaron correctamente")

                                if not errores_fatales:
                                    # Mostrar preview
                                    st.markdown("### üìä Vista Previa de Datos")
                                    st.info(f"Total de registros: {len(df)}")
                                    st.dataframe(df.head(10), use_container_width=True)
                                
                                # Botones de acci√≥n
                                col1, col2 = st.columns(2)
                                with col1:
                                    df_descarga = df.drop(columns=["IDENTIFICADOR", "N¬∫"], errors="ignore")
                                    buffer = guardar_con_formato_original(
                                        df_procesado=df_descarga,
                                        archivo_original_bytes=st.session_state.archivo1_bytes,
                                        nombre_hoja=None,  # Usar primera hoja
                                        fila_cabecera=st.session_state.archivo1_fila_cabecera
                                    )
                                    st.download_button(
                                        label="üíæ Descargar Archivo Homologado",
                                        data=buffer,
                                        file_name=f"{st.session_state.nombre_colegio}_nomina_RV.xlsx",
                                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                        use_container_width=True
                                    )
                                with col2:
                                    if st.button("‚û°Ô∏è Continuar al Paso 3", type="primary", use_container_width=True):
                                        st.session_state.paso_actual = 2
                                        st.rerun()
                            else:
                                st.error("‚ùå La fila seleccionada no contiene todas las columnas requeridas")
                
                except Exception as e:
                    st.error(f"‚ùå Error al procesar el archivo: {e}")

# ================================================
# PASO 2: ARCHIVO 2 (NOTAS)
# ================================================
elif st.session_state.paso_actual == 2:
    # Mostrar resumen de pasos anteriores
    with st.expander("‚úÖ Pasos completados", expanded=False):
        st.success(f"**Colegio:** {st.session_state.nombre_colegio}")
        st.success(f"**Archivo 1:** {len(st.session_state.archivo1_df)} registros cargados")
        if st.button("üîô Volver al Paso 2", key="volver_paso2"):
            st.session_state.paso_actual = 1
            st.rerun()
    
    st.header("üìä Paso 3: Archivo de Notas de Cursos")
    
    # Equivalencias de cursos
    with st.expander("‚öôÔ∏è Configuraci√≥n de Cursos Equivalentes", expanded=False):
        st.markdown("""
        <div style='background-color: #78808C; padding: 15px; border-radius: 10px;'>
            <p>Opcionalmente, puedes cargar un archivo .txt con cursos adicionales para reconocimiento autom√°tico.</p>
        </div>
        """, unsafe_allow_html=True)
        
        archivo_txt = st.file_uploader("Archivo de equivalencias (.txt)", type=["txt"])
        if archivo_txt:
            contenido = archivo_txt.getvalue().decode("utf-8", errors="ignore")
            nuevos = [l.strip().upper() for l in contenido.splitlines() if l.strip()]
            st.session_state.cursos_equivalentes = sorted(list(set(st.session_state.cursos_equivalentes + nuevos)))
            st.success(f"‚úÖ {len(nuevos)} cursos agregados. Total: {len(st.session_state.cursos_equivalentes)}")
    
    # Carga del archivo
    st.markdown("""
    <div style='background-color: #78808C; padding: 20px; border-radius: 10px; margin-bottom: 20px;'>
        <h4>üìÑ Instrucciones</h4>
        <p>Sube el archivo Excel con las notas de los cursos.</p>
        <p><strong>Columnas requeridas:</strong></p>
        <code>Nro., Paterno, Materno, Nombres, Curso, Grado, Secci√≥n,  Nota Vigesimal</code>
    </div>
    """, unsafe_allow_html=True)
    
    archivo2 = st.file_uploader("Selecciona el archivo Excel de notas", type=["xls", "xlsx"])
    
    if archivo2 is not None:
        # GUARDAR BYTES ORIGINALES
        st.session_state.archivo2_bytes = archivo2.getvalue()
        with st.spinner("üîç Analizando archivo y hojas disponibles..."):
            try:
                # Leer el archivo para detectar hojas
                xls_file = pd.ExcelFile(archivo2)
                hojas_disponibles = xls_file.sheet_names
                
                # Detectar qu√© hojas existen
                tiene_1p3p = "1P-3P" in hojas_disponibles
                tiene_4p5s = "4P-5S" in hojas_disponibles
                
                if not tiene_1p3p and not tiene_4p5s:
                    st.error("‚ùå El archivo no contiene ninguna de las hojas requeridas: '1P-3P' o '4P-5S'")
                    st.info(f"Hojas encontradas: {', '.join(hojas_disponibles)}")
                    st.stop()
                
                # Mostrar informaci√≥n de hojas detectadas
                st.success(f"‚úÖ Hojas detectadas en el archivo, √önicas Opciones ('1P-3P' o '4P-5S'):")
                cols_info = st.columns(2)
                with cols_info[0]:
                    if tiene_1p3p:
                        st.info("üìò **1P-3P** encontrada")
                with cols_info[1]:
                    if tiene_4p5s:
                        st.info("üìó **4P-5S** encontrada")
                
                st.divider()
                
                # ====================================
                # PROCESAR HOJA 1P-3P (Solo may√∫sculas)
                # ====================================
                df_1p3p_procesado = None
                if tiene_1p3p:
                    st.markdown("### üìò Procesando Hoja: 1P-3P")
                    
                    df_1p3p_original = pd.read_excel(archivo2, sheet_name="1P-3P", header=None)
                    fila_detectada_1p3p = detectar_cabecera_automatica(df_1p3p_original, COLUMNAS_ARCHIVO2)
                    
                    if fila_detectada_1p3p is not None:
                        # GUARDAR √çNDICE DE CABECERA
                        st.session_state.archivo2_1p3p_fila_cabecera = fila_detectada_1p3p
                        st.success(f"‚úÖ Cabecera detectada en la fila {fila_detectada_1p3p + 1}")
                        
                        df_1p3p = pd.read_excel(archivo2, sheet_name="1P-3P", header=fila_detectada_1p3p)
                        
                        # Procesar columnas
                        columnas_norm = {c.strip().lower(): c for c in df_1p3p.columns}
                        cols_a_usar = []
                        for col_req in COLUMNAS_ARCHIVO2:
                            col_norm = col_req.strip().lower()
                            if col_norm in columnas_norm:
                                cols_a_usar.append(columnas_norm[col_norm])
                        
                        df_1p3p = df_1p3p[cols_a_usar]
                        df_1p3p.columns = [col.upper() for col in COLUMNAS_ARCHIVO2]
                        
                        # Eliminar filas con campos vac√≠os en PATERNO, MATERNO y NOMBRES
                        df_1p3p = limpiar_filas_vacias(df_1p3p, columnas_clave=["PATERNO", "MATERNO", "NOMBRES"])

                        # Convertir num√©ricas a enteros
                        df_1p3p = convertir_numericas_a_entero(df_1p3p, columnas=["GRADO", "NOTA VIGESIMAL"])

                        # Homologar datos
                        df_1p3p = homologar_dataframe(df_1p3p)

                        # Validar campos vac√≠os en PATERNO, MATERNO o NOMBRES
                        columnas_obligatorias = ["PATERNO", "MATERNO", "NOMBRES"]
                        filas_vacias = df_1p3p[df_1p3p[columnas_obligatorias].isnull().any(axis=1)]

                        if not filas_vacias.empty:
                            st.error("‚ùå Se detectaron campos vac√≠os en nombres o apellidos (Hoja 1P-3P)")
                            st.dataframe(filas_vacias, use_container_width=True)
                            st.stop()
                        
                        # Validaciones para Archivo 2 - Hoja 1P-3P
                        errores_validacion_1p3p = []

                        # Completar valores vac√≠os en NOTA VIGESIMAL con "NP"
                        if "NOTA VIGESIMAL" in df_1p3p.columns:
                            df_1p3p["NOTA VIGESIMAL"] = df_1p3p["NOTA VIGESIMAL"].fillna("NP").replace("", "NP")

                        # Validar y mapear grados
                        df_1p3p, errores_grados = validar_y_mapear_grados(df_1p3p, "GRADO", tipo_validacion="1p3p")
                        errores_validacion_1p3p.extend(errores_grados)
                        
                        # Validar secciones
                        errores_secciones = validar_secciones(df_1p3p, "SECCI√ìN")
                        errores_validacion_1p3p.extend(errores_secciones)
                        
                        # Mostrar errores de validaci√≥n si existen
                        if errores_validacion_1p3p:
                            st.error("‚ùå Errores de validaci√≥n en 1P-3P:")
                            df_errores_fatales_1p3p = pd.DataFrame(errores_validacion_1p3p, columns=["Detalle de los errores cr√≠ticos"])
                                
                            # Mostrar tabla scrolleable
                            st.dataframe(
                                df_errores_fatales_1p3p,
                                use_container_width=True,
                                height=220  # ajusta la altura visible (unas 5-6 filas aprox)
                            )
                                
                            st.caption(f"üîé Total de errores: {len(errores_validacion_1p3p)}")
                            st.info("Por favor, corrige estos errores en el archivo y vuelve a cargarlo")
                            st.stop()
                        else:
                            st.success("‚úÖ Validaciones de grados y secciones pasadas (1P-3P)")
                        
                        # Validar cursos en 1P-3P
                        cursos_invalidos_1p3p = sorted(df_1p3p.loc[~df_1p3p["CURSO"].isin(st.session_state.cursos_equivalentes), "CURSO"].unique())
                        
                        if len(cursos_invalidos_1p3p) > 0:
                            st.warning(f"‚ö†Ô∏è Se detectaron {len(cursos_invalidos_1p3p)} cursos no reconocidos en 1P-3P")
                            
                            with st.form("equivalencias_form_1p3p"):
                                st.markdown("### üîÑ Homologaci√≥n de Cursos (1P-3P)")
                                st.info("Selecciona el curso oficial correspondiente para cada curso no reconocido:")
                                
                                equivalencias_1p3p = {}
                                for curso in cursos_invalidos_1p3p:
                                    equivalencias_1p3p[curso] = st.selectbox(
                                        f"üìå **{curso}**",
                                        options=["-- Seleccionar --"] + st.session_state.cursos_equivalentes,
                                        key=f"eq_1p3p_{curso}"
                                    )
                                
                                submitted_1p3p = st.form_submit_button("‚úîÔ∏è Aplicar Equivalencias (1P-3P)", type="primary")
                                
                                if submitted_1p3p:
                                    if any(v == "-- Seleccionar --" for v in equivalencias_1p3p.values()):
                                        st.error("‚ùå Debes seleccionar un curso para todos los campos")
                                    else:
                                        # Aplicar equivalencias
                                        for curso_err, curso_ok in equivalencias_1p3p.items():
                                            df_1p3p.loc[df_1p3p["CURSO"] == curso_err, "CURSO"] = curso_ok
                                        
                                        # Agregar solo IDENTIFICADOR
                                        df_1p3p["IDENTIFICADOR"] = crear_identificador(df_1p3p, "PATERNO", "MATERNO", "NOMBRES")
                                        
                                        # Reordenar
                                        cols_orden = [c for c in df_1p3p.columns if c != "IDENTIFICADOR"]
                                        cols_orden.append("IDENTIFICADOR")
                                        df_1p3p = df_1p3p[cols_orden]
                                        
                                        # Guardar en session_state
                                        st.session_state.archivo2_1p3p_df = df_1p3p
                                        st.session_state.archivo2_1p3p_df.insert(0, 'Nro.', range(1, len(st.session_state.archivo2_1p3p_df) + 1))
                                        
                                        st.success("‚úÖ Cursos homologados correctamente en 1P-3P")
                                        st.rerun()
                        
                        # Si no hay cursos inv√°lidos
                        if len(cursos_invalidos_1p3p) == 0 or st.session_state.archivo2_1p3p_df is not None:
                            # Usar el DataFrame guardado si existe, sino usar el actual
                            if st.session_state.archivo2_1p3p_df is not None:
                                df_1p3p = st.session_state.archivo2_1p3p_df
                            else:
                                # Agregar solo IDENTIFICADOR
                                df_1p3p["IDENTIFICADOR"] = crear_identificador(df_1p3p, "PATERNO", "MATERNO", "NOMBRES")
                                
                                # Reordenar
                                cols_orden = [c for c in df_1p3p.columns if c != "IDENTIFICADOR"]
                                cols_orden.append("IDENTIFICADOR")
                                df_1p3p = df_1p3p[cols_orden]
                                
                                st.session_state.archivo2_1p3p_df = df_1p3p
                                st.session_state.archivo2_1p3p_df.insert(0, 'Nro.', range(1, len(st.session_state.archivo2_1p3p_df) + 1))
                            
                            df_1p3p_procesado = df_1p3p
                            
                            with st.expander("Vista previa 1P-3P", expanded=False):
                                st.info(f"Total de registros: {len(df_1p3p)}")
                                st.dataframe(df_1p3p, use_container_width=True)
                    else:
                        st.error("‚ùå Error de cabecera en la hoja 1P-3P")
                        st.warning("‚ö†Ô∏è No se pudo detectar cabecera autom√°ticamente en 1P-3P")
                        st.info("Por favor, verifica que la hoja tenga las columnas correctas:")
                        st.code("Nro., Paterno, Materno, Nombres, Curso, Grado, Secci√≥n, Nota Vigesimal")
                        st.stop()
                
                # ====================================
                # PROCESAR HOJA 4P-5S (Homologaci√≥n completa)
                # ====================================
                df_4p5s_procesado = None
                if tiene_4p5s:
                    st.markdown("### üìó Procesando Hoja: 4P-5S")
                    
                    df_original2 = pd.read_excel(archivo2, sheet_name="4P-5S", header=None)
                    fila_detectada2 = detectar_cabecera_automatica(df_original2, COLUMNAS_ARCHIVO2)
                    
                    if fila_detectada2 is not None:
                        # GUARDAR √çNDICE DE CABECERA
                        st.session_state.archivo2_4p5s_fila_cabecera = fila_detectada2
                        st.success(f"‚úÖ Cabecera detectada en la fila {fila_detectada2 + 1}")
                        
                        df2 = pd.read_excel(archivo2, sheet_name="4P-5S", header=fila_detectada2)
                    
                        # Procesar columnas
                        columnas_norm = {c.strip().lower(): c for c in df2.columns}
                        cols_a_usar = []
                        for col_req in COLUMNAS_ARCHIVO2:
                            col_norm = col_req.strip().lower()
                            if col_norm in columnas_norm:
                                cols_a_usar.append(columnas_norm[col_norm])
                        
                        df2 = df2[cols_a_usar]
                        df2.columns = [col.upper() for col in COLUMNAS_ARCHIVO2]

                        # Eliminar filas con campos vac√≠os en PATERNO, MATERNO y NOMBRES
                        df2 = limpiar_filas_vacias(df2, columnas_clave=["PATERNO", "MATERNO", "NOMBRES"])
                        
                        # Convertir num√©ricas a enteros
                        df2 = convertir_numericas_a_entero(df2, columnas=["GRADO", "NOTA VIGESIMAL"])

                        # Homologar datos
                        df2 = homologar_dataframe(df2)

                        # Validaciones para Archivo 2 - Hoja 4P-5S
                        errores_validacion_4p5s = []

                        # Validar y mapear grados
                        df2, errores_grados = validar_y_mapear_grados(df2, "GRADO", tipo_validacion="4p5s")
                        errores_validacion_4p5s.extend(errores_grados)

                        # Validar secciones
                        errores_secciones = validar_secciones(df2, "SECCI√ìN")
                        errores_validacion_4p5s.extend(errores_secciones)

                        # Mostrar errores de validaci√≥n si existen
                        if errores_validacion_4p5s:
                            st.error("‚ùå Errores de validaci√≥n en 4P-5S:")
                            df_errores_fatales_4p5s = pd.DataFrame(errores_validacion_4p5s, columns=["Detalle de los errores cr√≠ticos"])
                                    
                            # Mostrar tabla scrolleable
                            st.dataframe(
                                df_errores_fatales_4p5s,
                                use_container_width=True,
                                height=220  # ajusta la altura visible (unas 5-6 filas aprox)
                            )
                                    
                            st.caption(f"üîé Total de errores: {len(errores_validacion_4p5s)}")
                            st.info("Por favor, corrige estos errores en el archivo y vuelve a cargarlo")
                            st.stop()

                        else:
                            st.success("‚úÖ Validaciones de grados y secciones pasadas (4P-5S)")

                        # Completar valores vac√≠os en NOTA VIGESIMAL con "NP"
                        if "NOTA VIGESIMAL" in df2.columns:
                            df2["NOTA VIGESIMAL"] = df2["NOTA VIGESIMAL"].fillna("NP").replace("", "NP")
                        
                        # Validar campos vac√≠os
                        columnas_oblig = ["PATERNO", "MATERNO", "NOMBRES", "CURSO", "GRADO", "SECCI√ìN", "NOTA VIGESIMAL"]
                        filas_vacias = df2[df2[columnas_oblig].isnull().any(axis=1)]
                        
                        if not filas_vacias.empty:
                            st.error("‚ùå Se detectaron campos vac√≠os")
                            st.dataframe(filas_vacias, use_container_width=True)
                            st.stop()
                        
                        # Validar cursos
                        cursos_invalidos = sorted(df2.loc[~df2["CURSO"].isin(st.session_state.cursos_equivalentes), "CURSO"].unique())
                        
                        if len(cursos_invalidos) > 0:
                            st.warning(f"‚ö†Ô∏è Se detectaron {len(cursos_invalidos)} cursos no reconocidos")
                            
                            with st.form("equivalencias_form"):
                                st.markdown("### üîÑ Homologaci√≥n de Cursos")
                                st.info("Selecciona el curso oficial correspondiente para cada curso no reconocido:")
                                
                                equivalencias = {}
                                for curso in cursos_invalidos:
                                    equivalencias[curso] = st.selectbox(
                                        f"üìå **{curso}**",
                                        options=["-- Seleccionar --"] + st.session_state.cursos_equivalentes,
                                        key=f"eq_{curso}"
                                    )
                                
                                submitted = st.form_submit_button("‚úîÔ∏è Aplicar Equivalencias", type="primary")
                                
                                if submitted:
                                    if any(v == "-- Seleccionar --" for v in equivalencias.values()):
                                        st.error("‚ùå Debes seleccionar un curso para todos los campos")
                                    else:
                                        # Aplicar equivalencias
                                        for curso_err, curso_ok in equivalencias.items():
                                            df2.loc[df2["CURSO"] == curso_err, "CURSO"] = curso_ok
                                        
                                        # Guardar en session_state
                                        df2["IDENTIFICADOR"] = crear_identificador(df2, "PATERNO", "MATERNO", "NOMBRES")
                                        df2["NOTAS VIGESIMALES 75%"] = ""
                                        df2["PROMEDIO"] = ""
                                        
                                        # Reordenar columnas
                                        cols_orden = [c for c in df2.columns if c != "IDENTIFICADOR"]
                                        cols_orden.append("IDENTIFICADOR")
                                        df2 = df2[cols_orden]
                                        
                                        # Guardar en session_state
                                        st.session_state.archivo2_4p5s_df = df2
                                        st.session_state.archivo2_4p5s_df.insert(0, 'Nro.', range(1, len(st.session_state.archivo2_4p5s_df) + 1))
                                        
                                        st.success("‚úÖ Cursos homologados correctamente")
                                        st.rerun()
                    
                        # Si no hay cursos inv√°lidos
                        if len(cursos_invalidos) == 0 or st.session_state.archivo2_4p5s_df is not None:
                            df2["IDENTIFICADOR"] = crear_identificador(df2, "PATERNO", "MATERNO", "NOMBRES")
                            df2["NOTAS VIGESIMALES 75%"] = ""
                            df2["PROMEDIO"] = ""
                            
                            # Reordenar columnas
                            cols_orden = [c for c in df2.columns if c != "IDENTIFICADOR"]
                            cols_orden.append("IDENTIFICADOR")
                            df2 = df2[cols_orden]
                            
                            st.session_state.archivo2_4p5s_df = df2
                            st.session_state.archivo2_4p5s_df.insert(0, 'Nro.', range(1, len(st.session_state.archivo2_4p5s_df) + 1))
                            
                            df_4p5s_procesado = df2
                    else:
                        st.error("‚ùå Error de cabecera en la hoja 4P-5S")
                        st.warning("‚ö†Ô∏è No se pudo detectar cabecera autom√°ticamente en 4P-5S")
                        st.info("Por favor, verifica que la hoja tenga las columnas correctas:")
                        st.code("Nro., Paterno, Materno, Nombres, Curso, Grado, Secci√≥n, Nota Vigesimal")
                        st.stop()

                # ====================================
                # SECCI√ìN DE DESCARGA
                # ====================================
                if df_1p3p_procesado is not None or df_4p5s_procesado is not None:
                    st.divider()
                    st.markdown("### üíæ Archivos Listos para Descargar")
                    
                    # Calcular n√∫mero de botones de descarga
                    num_descargas = 0
                    if df_1p3p_procesado is not None:
                        num_descargas += 1  # archivo homologado 1P-3P
                    if df_4p5s_procesado is not None:
                        num_descargas += 1  # archivo homologado 4P-5S
                    # Siempre hay 1 archivo evaluador (puede tener 1 o 2 hojas)
                    num_descargas += 1
                    
                    # Dise√±o din√°mico
                    cols_descarga = st.columns(min(num_descargas, 3))
                    col_idx = 0
                    
                    # Descargas para 1P-3P (archivo homologado)
                    if df_1p3p_procesado is not None:
                        with cols_descarga[col_idx]:
                            df_sin_notas_1p3p = df_1p3p_procesado.drop(columns=["IDENTIFICADOR", "NRO."], errors="ignore")
                            df_sin_notas_1p3p["NOTA VIGESIMAL"] = df_sin_notas_1p3p["NOTA VIGESIMAL"].astype(str).replace('NAN', 'NP')
                            buffer_1p3p = guardar_con_formato_original(
                                df_procesado=df_sin_notas_1p3p,
                                archivo_original_bytes=st.session_state.archivo2_bytes,
                                nombre_hoja="1P-3P",
                                fila_cabecera=st.session_state.archivo2_1p3p_fila_cabecera,
                                solo_hoja_especificada=True
                            )
                            st.download_button(
                                label="üì• 1P-3P Homologado",
                                data=buffer_1p3p,
                                file_name=f"{st.session_state.nombre_colegio}_1P-3P_RV.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True
                            )
                        col_idx += 1
                    
                    # Descargas para 4P-5S (archivo homologado)
                    if df_4p5s_procesado is not None:
                        with cols_descarga[col_idx]:
                            df_sin_notas_4p5s = df_4p5s_procesado.drop(columns=["IDENTIFICADOR", "NRO.", "NOTAS VIGESIMALES 75%", "PROMEDIO"], errors="ignore")
                            df_sin_notas_4p5s["NOTA VIGESIMAL"] = df_sin_notas_4p5s["NOTA VIGESIMAL"].astype(str).replace('NAN', 'NP')
                            buffer_4p5s = guardar_con_formato_original(
                                df_procesado=df_sin_notas_4p5s,
                                archivo_original_bytes=st.session_state.archivo2_bytes,
                                nombre_hoja="4P-5S",
                                fila_cabecera=st.session_state.archivo2_4p5s_fila_cabecera,
                                solo_hoja_especificada=True
                            )
                            st.download_button(
                                label="üì• 4P-5S Homologado",
                                data=buffer_4p5s,
                                file_name=f"{st.session_state.nombre_colegio}_4P-5S_RV.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True
                            )
                        col_idx += 1
                    
                    # ARCHIVO EVALUADOR √öNICO (con todas las hojas necesarias)
                    with cols_descarga[col_idx]:
                        # Combinar ambos DataFrames procesados para hacer UN SOLO merge
                        df_merge_completo = pd.concat([
                            df_1p3p_procesado if df_1p3p_procesado is not None else pd.DataFrame(),
                            df_4p5s_procesado if df_4p5s_procesado is not None else pd.DataFrame()
                        ], ignore_index=True)
                        
                        # Crear evaluadores separados por grado
                        df_eval_1p3p, df_eval_4p5s = crear_archivo_evaluador(
                            st.session_state.archivo1_df,
                            df_merge_completo
                        )
                        
                        # Preparar diccionario de hojas para el archivo evaluador
                        dict_hojas_evaluador = {}
                        
                        if len(df_eval_1p3p) > 0 and df_1p3p_procesado is not None:
                            df_eval_1p3p_final = df_eval_1p3p.drop(columns=["IDENTIFICADOR"], errors="ignore")
                            df_eval_1p3p_final["NOTA VIGESIMAL"] = df_eval_1p3p_final["NOTA VIGESIMAL"].astype(str).replace('NAN', 'NP')
                            dict_hojas_evaluador["1P-3P"] = {
                                'df': df_eval_1p3p_final,
                                'fila_cabecera': st.session_state.archivo2_1p3p_fila_cabecera
                            }
                        
                        if len(df_eval_4p5s) > 0 and df_4p5s_procesado is not None:
                            df_eval_4p5s_final = df_eval_4p5s.drop(columns=["IDENTIFICADOR"], errors="ignore")
                            df_eval_4p5s_final["NOTA VIGESIMAL"] = df_eval_4p5s_final["NOTA VIGESIMAL"].astype(str).replace('NAN', 'NP')
                            dict_hojas_evaluador["4P-5S"] = {
                                'df': df_eval_4p5s_final,
                                'fila_cabecera': st.session_state.archivo2_4p5s_fila_cabecera
                            }
                        
                        # Guardar archivo evaluador con todas las hojas
                        buffer_evaluador = guardar_evaluador_con_multiples_hojas(
                            archivo_original_bytes=st.session_state.archivo2_bytes,
                            dict_hojas_procesadas=dict_hojas_evaluador
                        )
                        
                        st.download_button(
                            label="üì• Archivo Evaluador",
                            data=buffer_evaluador,
                            file_name=f"{st.session_state.nombre_colegio}_evaluador.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )
                    
                    # Bot√≥n de finalizaci√≥n
                    st.divider()
                    col1, col2, col3 = st.columns([1, 1, 2])
                    with col1:
                        if st.button("‚úÖ Finalizar Proceso", type="primary", use_container_width=True):
                            st.session_state.paso_actual = 3
                            st.rerun()
                
                else:
                    st.warning("‚ö†Ô∏è Detecci√≥n manual necesaria")
            
            except Exception as e:
                st.error(f"‚ùå Error: {e}")

# ================================================
# PASO 3: FINALIZACI√ìN
# ================================================
elif st.session_state.paso_actual == 3:
    st.balloons()
    
    st.markdown("""
    <div style='background-color: #78808C; padding: 30px; border-radius: 15px; text-align: center;'>
        <h1>üéâ ¬°Proceso Completado!</h1>
        <p style='font-size: 18px;'>Todos los archivos han sido procesados y homologados correctamente.</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìã Resumen del Proceso")
        st.success(f"**Colegio:** {st.session_state.nombre_colegio}")
        st.success(f"**Archivo 1:** {len(st.session_state.archivo1_df)} registros")
        
        if st.session_state.archivo2_1p3p_df is not None:
            st.success(f"**Hoja 1P-3P:** {len(st.session_state.archivo2_1p3p_df)} registros")
        if st.session_state.archivo2_4p5s_df is not None:
            st.success(f"**Hoja 4P-5S:** {len(st.session_state.archivo2_4p5s_df)} registros")
    
    with col2:
        st.markdown("### üîÑ Acciones")
        if st.button("üÜï Procesar Nuevo Colegio", type="primary", use_container_width=True):
            # Reiniciar todo
            st.session_state.paso_actual = 0
            st.session_state.nombre_colegio = ""
            st.session_state.archivo1_df = None
            st.session_state.archivo2_df = None
            st.session_state.archivo1_bytes = None
            st.session_state.archivo2_bytes = None
            st.session_state.archivo1_fila_cabecera = None
            st.session_state.archivo2_1p3p_fila_cabecera = None
            st.session_state.archivo2_4p5s_fila_cabecera = None
            st.rerun()
        
        if st.button("üîô Volver al Paso 3", use_container_width=True):
            st.session_state.paso_actual = 2
            st.rerun()